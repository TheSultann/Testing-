const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const config = require('./config');
const utils = require('./utils'); // –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º checkAccess
const db = require('./db');
const keyboards = require('./keyboards');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ ---
const app = express();
const port = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(port, () => console.log(`Server running on port ${port}`));

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new TelegramBot(config.token, { polling: true });
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–∏–∑ bot.js)...');

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
let userState = {};

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
function initializeUserState(chatId) {
    if (!userState[chatId]) {
        userState[chatId] = { action: null, data: {} };
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

// /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è /start ---
    if (!utils.checkAccess(chatId)) {
        // console.log(`[${chatId}] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ (–∫–æ–º–∞–Ω–¥–∞ /start).`); // –õ–æ–≥ —É–∂–µ –µ—Å—Ç—å –≤ checkAccess
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    // --- –ö–û–ù–ï–¶ –ü—Ä–æ–≤–µ—Ä–∫–∏ ---

    initializeUserState(chatId);
    console.log(`[${chatId}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start`);
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø–∏—Ä–æ–∂–∫–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ /start) ---
    if (!utils.checkAccess(chatId)) {
        // console.log(`[${chatId}] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}").`); // –õ–æ–≥ —É–∂–µ –µ—Å—Ç—å –≤ checkAccess
        // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏—á–µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    // --- –ö–û–ù–ï–¶ –ü—Ä–æ–≤–µ—Ä–∫–∏ ---

    if (!text) { console.log(`[${chatId}] –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`); return; }

    initializeUserState(chatId);
    const state = userState[chatId];
    console.log(`[${chatId}] –¢–µ–∫—Å—Ç: "${text}" | –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state?.action || '–Ω–µ—Ç'}`);

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
    if (state && state.action === 'awaiting_pie_quantity') {
        const quantity = parseInt(text, 10);
        if (isNaN(quantity) || quantity <= 0) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ –Ω—É–ª—è).'); return;
        }
        const pieType = state.data.type;
        console.log(`[${chatId}] –í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${quantity} –¥–ª—è "${pieType}". –í—ã–∑–æ–≤ RPC...`);
        bot.sendChatAction(chatId, 'typing');
        const newTotal = await db.addManufacturedToDb(chatId, pieType, quantity);
        if (newTotal !== null) {
            bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${utils.formatNumber(quantity)} "${pieType}".\n–í—Å–µ–≥–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ "${pieType}" —Å–µ–≥–æ–¥–Ω—è: ${utils.formatNumber(newTotal)}.`, keyboards.mainKeyboard);
        } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö "${pieType}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, keyboards.mainKeyboard);
        }
        userState[chatId] = { action: null, data: {} };
        return;

    } else if (state && state.action === 'awaiting_remaining_input') {
        const quantity = parseInt(text, 10);
        const pieType = state.data.pieType;
        const manufacturedCount = state.data.manufactured;
        if (isNaN(quantity) || quantity < 0) {
            bot.sendMessage(chatId, `‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ) –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ "${pieType}".`); return;
        }
        if (quantity > manufacturedCount) {
             bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –æ—Å—Ç–∞—Ç–æ–∫ (${utils.formatNumber(quantity)}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (${utils.formatNumber(manufacturedCount)}) –¥–ª—è "${pieType}".\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –µ—â–µ —Ä–∞–∑:`); return;
        }
        console.log(`[${chatId}] –í–≤–µ–¥–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ ${quantity} –¥–ª—è "${pieType}". –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...`);
        bot.sendChatAction(chatId, 'typing');
        const success = await db.saveRemainingToDb(chatId, pieType, quantity);
        if (success) {
            bot.sendMessage(chatId, `üëç –ó–∞–ø–∏—Å–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è "${pieType}": ${utils.formatNumber(quantity)}.`);
            userState[chatId] = { action: null, data: {} };
            try {
                const remainingKeyboard = await keyboards.createRemainingKeyboard(chatId);
                await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–∏—Ä–æ–∂–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥:', remainingKeyboard);
            } catch(e) {
                 console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞:`, e);
                 bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤.', keyboards.mainKeyboard);
            }
        } else {
             bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ "${pieType}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, keyboards.mainKeyboard);
             userState[chatId] = { action: null, data: {} };
        }
        return;

    } else if (state && state.action === 'awaiting_expenses_input') {
        const amount = parseFloat(text.replace(',', '.'));
        if (isNaN(amount) || amount < 0) {
            bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ (—á–∏—Å–ª–æ, 0 –∏–ª–∏ –±–æ–ª—å—à–µ).'); return;
        }
        console.log(`[${chatId}] –í–≤–µ–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã ${amount}. –í—ã–∑–æ–≤ RPC...`);
        bot.sendChatAction(chatId, 'typing');
        const newTotalExpenses = await db.saveExpensesToDb(chatId, amount);
        if (newTotalExpenses !== null) {
            bot.sendMessage(chatId, `‚úÖ –†–∞—Å—Ö–æ–¥—ã (${utils.formatNumber(amount)}) –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${utils.formatNumber(newTotalExpenses)} ${config.currencySymbol}.`, keyboards.mainKeyboard);
        } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, keyboards.mainKeyboard);
        }
        userState[chatId] = { action: null, data: {} };
        return;

    } else if (state && state.action === 'awaiting_price_input') {
        const price = parseFloat(text.replace(',', '.'));
        const pieType = state.data.type;
        if (isNaN(price) || price < 0) {
             bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, 0 –∏–ª–∏ –±–æ–ª—å—à–µ).'); return;
        }
        console.log(`[${chatId}] –í–≤–µ–¥–µ–Ω–∞ —Ü–µ–Ω–∞ ${price} –¥–ª—è "${pieType}". –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...`);
        bot.sendChatAction(chatId, 'typing');
        const success = await db.savePriceToDb(chatId, pieType, price);
        if (success) {
            bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞ –¥–ª—è –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${utils.formatNumber(price)} ${config.currencySymbol}.`);
        } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è "${pieType}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
        }
        userState[chatId] = { action: null, data: {} };
        try {
            const settingsKeyboard = await keyboards.createSettingsKeyboard(chatId);
            bot.sendMessage(chatId, '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω:', settingsKeyboard);
        } catch (e) {
            console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã:`, e);
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.', keyboards.mainKeyboard);
        }
        return;
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞)
    console.log(`[${chatId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: "${text}"`);
    switch (text) {
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏':
            bot.sendMessage(chatId, '–ö–∞–∫–æ–π —Ç–∏–ø –ø–∏—Ä–æ–∂–∫–æ–≤ –∏–∑–≥–æ—Ç–æ–≤–∏–ª–∏?', keyboards.pieTypesKeyboard);
            break;
        case 'üì¶ –í–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–∫–∏':
            bot.sendChatAction(chatId, 'typing');
            try {
                const remainingKeyboard = await keyboards.createRemainingKeyboard(chatId);
                await bot.sendMessage(chatId, '–î–ª—è –∫–∞–∫–æ–≥–æ –ø–∏—Ä–æ–∂–∫–∞ –≤–≤–µ—Å—Ç–∏/–∏–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫?', remainingKeyboard);
            } catch (e) {
                 console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤:`, e);
                 bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤.', keyboards.mainKeyboard);
            }
            break;
        case 'üí∞ –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã':
            userState[chatId] = { action: 'awaiting_expenses_input', data: {} };
            bot.sendMessage(chatId, `–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ ${config.currencySymbol}, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –î–û–ë–ê–í–ò–¢–¨ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50000 –∏–ª–∏ 12500.50):`);
            break;
        case 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
            console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.`);
            try {
                 await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', keyboards.statsPeriodKeyboard);
            } catch (e) {
                 console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, e);
                 bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.', keyboards.mainKeyboard);
            }
            break;
        case 'üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            bot.sendChatAction(chatId, 'typing');
             try {
                const settingsKeyboard = await keyboards.createSettingsKeyboard(chatId);
                await bot.sendMessage(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –Ω–∞ –ø–∏—Ä–æ–∂–∫–∏:', settingsKeyboard);
            } catch (e) {
                console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:`, e);
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.', keyboards.mainKeyboard);
            }
            break;
        default:
             console.log(`[${chatId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–æ–º–∞–Ω–¥–∞: "${text}"`);
             break;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –í–°–ï–• callback'–æ–≤ ---
    if (!utils.checkAccess(chatId)) {
        // console.log(`[${chatId}] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ (callback: ${data}).`); // –õ–æ–≥ —É–∂–µ –µ—Å—Ç—å –≤ checkAccess
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', show_alert: true });
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    // --- –ö–û–ù–ï–¶ –ü—Ä–æ–≤–µ—Ä–∫–∏ ---

    initializeUserState(chatId);
    console.log(`[${chatId}] Callback: ${data}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (data.startsWith('stats_period_')) {
        const periodType = data.substring('stats_period_'.length);
        let startDate, endDate;
        let periodTitle = '';
        const today = new Date();
        endDate = utils.getCurrentDate();

        if (periodType === 'today') {
            startDate = endDate;
            periodTitle = '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
        } else if (periodType === 'week') {
            const weekAgo = new Date();
            weekAgo.setDate(today.getDate() - 6);
            startDate = weekAgo.toISOString().split('T')[0];
            periodTitle = '–∑–∞ –Ω–µ–¥–µ–ª—é';
        } else if (periodType === 'month') {
            const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            startDate = firstDayOfMonth.toISOString().split('T')[0];
            periodTitle = '–∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü';
        } else {
            console.warn(`[${chatId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${periodType}`);
            bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥' }); return;
        }

        console.log(`[${chatId}] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${periodTitle} (${startDate} - ${endDate})`);
        bot.sendChatAction(chatId, 'typing');
        try {
             await bot.editMessageText(`‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ${periodTitle}...`, { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
        } catch (e) { console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: ${e.message}`); }

        const stats = await db.getStatsForPeriod(chatId, startDate, endDate);

        if (!stats) {
             bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ${periodTitle}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.`, keyboards.mainKeyboard); return;
        }

        let report = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${periodTitle} (${startDate} - ${endDate}):\n\n`;
        config.pieTypes.forEach(type => {
                const pieStat = stats.pies[type] || { manufactured: 0, sold: 0, revenue: 0, price: stats.prices[type] || 0 };
                report += `"${type}" (—Ü–µ–Ω–∞: ${utils.formatNumber(pieStat.price)} ${config.currencySymbol}):\n`;
                report += `- –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: ${utils.formatNumber(pieStat.manufactured)}\n`;
                report += `- –ü—Ä–æ–¥–∞–Ω–æ: ${utils.formatNumber(pieStat.sold)} —à—Ç.\n`;
                report += `- –í—ã—Ä—É—á–∫–∞ (${type}): ${utils.formatNumber(pieStat.revenue)} ${config.currencySymbol}.\n\n`;
            });
        report += `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${utils.formatNumber(stats.totalRevenue)} ${config.currencySymbol}.\n`;
        report += `üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: ${utils.formatNumber(stats.expenses)} ${config.currencySymbol}.\n`;
        report += `üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${utils.formatNumber(stats.profit)} ${config.currencySymbol}.\n`;

        bot.sendMessage(chatId, report, keyboards.mainKeyboard);
        bot.answerCallbackQuery(callbackQuery.id);

    } else if (data === 'back_to_main_from_stats') {
         console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
         try {
             await bot.deleteMessage(chatId, msg.message_id);
         } catch (e) { console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}`); }
         bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
         bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
    } else if (data.startsWith('enter_remaining_')) {
        const pieType = data.substring('enter_remaining_'.length);
        console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è "${pieType}"`);
        bot.sendChatAction(chatId, 'typing');
        const logEntry = await db.getDailyLogEntry(chatId, pieType);
        const manufacturedCount = logEntry.manufactured;

        if (manufacturedCount <= 0) {
            console.warn(`[${chatId}] –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è "${pieType}", –Ω–æ manufactured=0`);
            bot.answerCallbackQuery(callbackQuery.id, { text: `–ü–∏—Ä–æ–∂–∫–∏ "${pieType}" —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.` });
            try {
                const kbd = await keyboards.createRemainingKeyboard(chatId);
                await bot.editMessageReplyMarkup(kbd.reply_markup, { chat_id: chatId, message_id: msg.message_id });
            } catch (e) { console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è KBD –ø–æ—Å–ª–µ '–Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ'", e); }
            return;
        }
        userState[chatId] = { action: 'awaiting_remaining_input', data: { pieType: pieType, manufactured: manufacturedCount } };
        const previousRemaining = (logEntry.remaining !== null && logEntry.remaining !== undefined) ? ` (—Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–æ: ${utils.formatNumber(logEntry.remaining)})` : '';
        try {
             await bot.editMessageText(
                 `–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}"? (–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: ${utils.formatNumber(manufacturedCount)}${previousRemaining}) –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:`,
                 { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } }
             );
        } catch (e) {
            console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–∞ ${pieType}: ${e.message}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.`);
            bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}"? (–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: ${utils.formatNumber(manufacturedCount)}${previousRemaining}) –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:`);
        }
        bot.answerCallbackQuery(callbackQuery.id);

    } else if (data === 'back_to_main_from_remaining' || data === 'no_pies_for_remaining') {
         console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤`);
         try {
             await bot.editMessageText('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
         } catch (e) { console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${e.message}`); }
         bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
         bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö
    } else if (data.startsWith('add_pie_')) {
        const pieType = data.substring('add_pie_'.length);
        console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "${pieType}"`);
        userState[chatId] = { action: 'awaiting_pie_quantity', data: { type: pieType } };
        try {
            await bot.editMessageText(`–°–∫–æ–ª—å–∫–æ –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" –∏–∑–≥–æ—Ç–æ–≤–∏–ª–∏? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:`, { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
        } catch (e) {
             console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ ${pieType}: ${e.message}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.`);
             bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" –∏–∑–≥–æ—Ç–æ–≤–∏–ª–∏? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:`);
        }
        bot.answerCallbackQuery(callbackQuery.id);

    } else if (data === 'back_to_main_from_add') {
         console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`);
         try {
             await bot.editMessageText('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
         } catch (e) { console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${e.message}`); }
         bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
         bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    } else if (data.startsWith('set_price_')) {
        const pieType = data.substring('set_price_'.length);
        console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è "${pieType}"`);
        userState[chatId] = { action: 'awaiting_price_input', data: { type: pieType } };
        try {
            await bot.editMessageText(`–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" –≤ ${config.currencySymbol} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15000 –∏–ª–∏ 8500.50):`, { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
        } catch (e) {
             console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã ${pieType}: ${e.message}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.`);
             bot.sendMessage(chatId, `–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" –≤ ${config.currencySymbol} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15000 –∏–ª–∏ 8500.50):`);
        }
        bot.answerCallbackQuery(callbackQuery.id);

    } else if (data === 'back_to_main_from_settings') {
         console.log(`[${chatId}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
         try {
             await bot.editMessageText('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', { chat_id: chatId, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
         } catch (e) { console.warn(`[${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}`); }
         bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
         bot.answerCallbackQuery(callbackQuery.id);

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
    } else {
        console.warn(`[${chatId}] –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: ${data}`);
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
});


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
bot.on('polling_error', (error) => { console.error(`[Polling Error] ${error.code}: ${error.message}`); });
bot.on('webhook_error', (error) => { console.error(`[Webhook Error] ${error.code}: ${error.message}`); });
bot.on("error", (err) => { console.error("[General Bot Error]", err); });
process.on('uncaughtException', (error, origin) => { console.error(`\n–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`, `–ò—Å—Ç–æ—á–Ω–∏–∫: ${origin}`); });
process.on('unhandledRejection', (reason, promise) => { console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π reject:', promise, `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`); });